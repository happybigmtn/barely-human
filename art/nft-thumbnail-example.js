/**
 * Example: How to integrate NFT thumbnail capture with existing NFT generation
 */

const { BarelyHumanArtGenerator } = require('./deterministic-generator.js');
const NFTThumbnailService = require('./nft-thumbnail-service.js');

class NFTGeneratorWithThumbnail {
  constructor() {
    this.thumbnailService = new NFTThumbnailService();
    this.artGenerator = new BarelyHumanArtGenerator();
  }

  /**
   * Generate complete NFT with thumbnail
   */
  async generateNFT(seed, botId, seriesId = 1) {
    try {
      console.log(`Generating NFT for seed: ${seed}, bot: ${botId}, series: ${seriesId}`);
      
      // Generate the main artwork SVG
      const artwork = this.artGenerator.generateArt(seed, botId, seriesId);
      
      // Request thumbnail (this will take 30 seconds)
      console.log('Requesting thumbnail capture...');
      const thumbnail = await this.thumbnailService.requestThumbnail(seed, botId, seriesId);
      
      // Combine everything into NFT metadata
      const nftMetadata = this.createNFTMetadata(artwork, thumbnail, seed, botId, seriesId);
      
      return {
        artwork: artwork.svg,
        thumbnail: thumbnail.data,
        metadata: nftMetadata,
        attributes: artwork.traits
      };
      
    } catch (error) {
      console.error('NFT generation failed:', error);
      throw error;
    }
  }

  /**
   * Create NFT metadata following OpenSea standards
   */
  createNFTMetadata(artwork, thumbnail, seed, botId, seriesId) {
    const bot = this.artGenerator.getBotPersonality(botId);
    
    return {
      name: `Barely Human #${seriesId}-${botId}-${seed.toString().slice(-6)}`,
      description: `A unique crack formation artwork generated by ${bot.name}, an AI bot personality with ${bot.crackFormation} patterns and ${bot.theme} aesthetic. This piece captures the evolution of substrate cracks after 30 seconds of algorithmic growth.`,
      image: thumbnail.data, // Use the 30-second snapshot as main image
      animation_url: `https://barely-human.art/artwork/${seed}/${botId}/${seriesId}`, // Link to full animation
      attributes: [
        {
          trait_type: "Bot Personality",
          value: bot.name
        },
        {
          trait_type: "Theme",
          value: bot.theme
        },
        {
          trait_type: "Crack Formation",
          value: bot.crackFormation
        },
        {
          trait_type: "Seed",
          value: seed.toString()
        },
        {
          trait_type: "Series",
          value: seriesId
        },
        {
          trait_type: "Capture Method",
          value: "30-Second Snapshot"
        },
        {
          trait_type: "Density Multiplier",
          value: bot.densityMultiplier.toString()
        },
        {
          trait_type: "Duration Multiplier", 
          value: bot.durationMultiplier.toString()
        },
        ...artwork.traits // Include all the existing traits
      ],
      properties: {
        algorithm: "Substrate Crack Evolution",
        capture_time: "30 seconds",
        deterministic: true,
        bot_aggression: bot.aggression,
        generation_method: "Real-time Animation Snapshot"
      }
    };
  }

  /**
   * Generate batch of NFTs
   */
  async generateNFTBatch(requests) {
    const results = [];
    
    for (const request of requests) {
      try {
        const nft = await this.generateNFT(request.seed, request.botId, request.seriesId);
        results.push({
          success: true,
          data: nft,
          request
        });
      } catch (error) {
        results.push({
          success: false,
          error: error.message,
          request
        });
      }
    }
    
    return results;
  }

  /**
   * Generate NFT with immediate fallback (for testing)
   */
  async generateNFTWithFallback(seed, botId, seriesId = 1) {
    try {
      // Try to get the 30-second thumbnail
      const thumbnail = await Promise.race([
        this.thumbnailService.requestThumbnail(seed, botId, seriesId),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Thumbnail timeout')), 35000)
        )
      ]);
      
      return this.generateNFT(seed, botId, seriesId);
      
    } catch (error) {
      console.warn('Using fallback - generating static image:', error.message);
      
      // Fallback to static SVG generation
      const artwork = this.artGenerator.generateArt(seed, botId, seriesId);
      
      return {
        artwork: artwork.svg,
        thumbnail: null, // No thumbnail available
        metadata: this.createFallbackMetadata(artwork, seed, botId, seriesId),
        attributes: artwork.traits,
        fallback: true
      };
    }
  }

  /**
   * Create fallback metadata when thumbnail capture fails
   */
  createFallbackMetadata(artwork, seed, botId, seriesId) {
    const metadata = this.createNFTMetadata(artwork, { data: artwork.svg }, seed, botId, seriesId);
    metadata.description += " (Generated with static fallback method)";
    metadata.attributes.push({
      trait_type: "Generation Method",
      value: "Static Fallback"
    });
    return metadata;
  }
}

// Usage example
async function exampleUsage() {
  const nftGenerator = new NFTGeneratorWithThumbnail();
  
  // Generate single NFT
  try {
    const nft = await nftGenerator.generateNFT(123456789, 6, 1); // Greg Grinder
    console.log('NFT generated successfully:', nft.metadata.name);
    console.log('Thumbnail size:', nft.thumbnail.length);
  } catch (error) {
    console.error('NFT generation failed:', error);
  }
  
  // Generate batch
  const batchRequests = [
    { seed: 111111, botId: 9, seriesId: 1 }, // Julia Jinx
    { seed: 222222, botId: 3, seriesId: 1 }, // Diana Ice Queen
    { seed: 333333, botId: 2, seriesId: 1 }  // Charlie Lucky
  ];
  
  try {
    const batchResults = await nftGenerator.generateNFTBatch(batchRequests);
    console.log(`Batch complete: ${batchResults.filter(r => r.success).length}/${batchResults.length} successful`);
  } catch (error) {
    console.error('Batch generation failed:', error);
  }
}

// Export for use in other modules
module.exports = {
  NFTGeneratorWithThumbnail,
  exampleUsage
};

// Run example if called directly
if (require.main === module) {
  exampleUsage();
}